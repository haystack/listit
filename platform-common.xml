<!-- vim: set ft=ant : -->
<project name="platform_common">
    <dirname property="root.dir" file="${ant.file.platform_common}" />
    <import file="${root.dir}/base-common.xml" />

    <dirname property="platform.dir" file="${ant.file}" />
    <basename property="platform" file="${platform.dir}" />
    <property name="build.dir" location="${base-build.dir}/${platform}" />
    <property name="debug.dir" location="${base-debug.dir}/${platform}" />
    <property name="deploy.dir" location="${base-deploy.dir}/${platform}" />

    <property name="listit.js.platform.dir" location="${listit.js.platforms.dir}/${platform}" />
    <property name="listit.css.platform.dir" location="${listit.css.platforms.dir}/${platform}" />

    <property file="${platform.dir}/platform.properties" />

    <!-- Resources -->
    <include file="${root.dir}/resources.xml" />
    <include optional="true" file="${platform.dir}/resources.xml" />

    <target name="build.release.squire" depends="build.release.setup">
        <release-assets name="squire" />
    </target>

    <target name="build.debug.squire" depends="build.debug.setup">
        <debug-assets name="squire" />
    </target>

    <target name="-build.release.assets" depends="build.release.squire">
        <generate-defines debug="${DEBUG}" property="defines_js" />
    </target>

    <macrodef name="generate-defines">
        <attribute name="property"/>
        <attribute name="debug" />
        <sequential>
            <local name="squire_json" />
            <jsonpath property="squire_json" basedir="${assets.dir}" prefix="${assets.prefix}">
                <resources refid="assets.squire.css.compiled"/>
            </jsonpath>
            <property name="@{property}">
                DEBUG_MODE=@{debug};
                SQUIRE_CSS=${squire_json};
                LISTIT_CREDITS=${listit.authors.json};
                LISTIT_EMAIL="${listit.email}";
            </property>
        </sequential>
    </macrodef>

    <target name="-build.debug.assets" depends="build.debug.squire">
        <local name="js_text"/>
        <generate-defines debug="${DEBUG}" property="js_text" />
        <echo message="${js_text}" file="${assets.js.dir}/defines-debug.js" />
    </target>

    <extension-point name="build.debug.assets" depends="-build.debug.assets" />
    <extension-point name="build.release.assets" depends="-build.release.assets" />

    <macrodef name="release-assets">
        <attribute name="name" />
        <attribute name="includeDefines" default="true"/>
        <sequential>
            <local name="css_text"/>
            <local name="js_text"/>
            <property name="css_text" value="" />
            <if>
                <istrue value="@{includeDefines}" />
                <then>
                    <property name="js_text" value="${defines_js}" />
                </then>
                <else>
                    <property name="js_text" value="" />
                </else>
            </if>
            <for list="css,js" param="type">
                <sequential>
                    <if>
                        <and>
                            <isreference refid="assets.@{name}.@{type}"/>
                            <not>
                                <isreference refid="assets.@{name}.@{type}.compiled" />
                            </not>
                        </and>
                        <then>
                            <echo level="verbose" message="Compiling @{type}: @{name}" />
                            <if>
                                <isset property="assets.@{name}.@{type}.concat" />
                                <then>
                                    <local name="output_file" />
                                    <pathconvert property="output_file">
                                        <filelist dir="${assets.@{type}.dir}"
                                            files="${assets.@{name}.@{type}.concat}"/>
                                    </pathconvert>
                                    <resources id="assets.@{name}.@{type}.compiled">
                                        <fileset file="${output_file}"/>
                                    </resources>
                                    <yuicompress type="@{type}" output="${output_file}">
                                        ${@{type}_text}
                                        <resources refid="assets.@{name}.@{type}" />
                                    </yuicompress>
                                </then>
                                <else>
                                    <local name="tmp_path" />
                                    <pathconvert property="tmp_path" refid="assets.@{name}.@{type}">
                                        <map from="${listit.dir}" to="${assets.dir}" />
                                    </pathconvert>
                                    <resources id="assets.@{name}.@{type}.compiled">
                                        <path path="${tmp_path}" />
                                    </resources>
                                    <for param="file" parallel="true" threadCount="5">
                                        <resources refid="assets.@{name}.@{type}" />
                                        <sequential>
                                            <local name="dest_file" />
                                            <pathconvert property="dest_file">
                                                <path location="@{file}" />
                                                <map from="${listit.dir}" to="${assets.dir}" />
                                            </pathconvert>
                                            <yuicompress type="@{type}" output="${dest_file}">
                                                ${@{type}_text}
                                                <fileset file="@{file}" />
                                            </yuicompress>
                                        </sequential>
                                    </for>
                                </else>
                            </if>
                            <pathconvert pathsep=":"
                                dirsep="/" property="assets.@{name}.@{type}.path">
                                <map from="${assets.dir}/" to="${assets.prefix}" />
                                <resources refid="assets.@{name}.@{type}.compiled" />
                            </pathconvert>
                        </then>
                    </if>
                </sequential>
            </for>
        </sequential>
    </macrodef>

    <macrodef name="debug-assets">
        <attribute name="name" />
        <attribute name="includeDefines" default="true"/>
        <sequential>
            <for list="css,js" param="type">
                <sequential>
                    <if>
                        <and>
                            <isreference refid="assets.@{name}.@{type}"/>
                            <not>
                                <isreference refid="assets.@{name}.@{type}.compiled" />
                            </not>
                        </and>
                        <then>
                            <echo level="info" message="Compiling @{type}: @{name}" />
                            <local name="tmp_path" />
                            <pathconvert property="tmp_path" refid="assets.@{name}.@{type}">
                                <map from="${listit.dir}" to="${assets.dir}" />
                            </pathconvert>
                            <if>
                                <istrue value="@{includeDefines}" />
                                <then>
                                    <resources id="assets.@{name}.@{type}.compiled">
                                        <fileset file="${assets.@{type}.dir}/defines-debug.@{type}" />
                                        <path path="${tmp_path}" />
                                    </resources>
                                </then>
                                <else>
                                    <resources id="assets.@{name}.@{type}.compiled">
                                        <path path="${tmp_path}" />
                                    </resources>
                                </else>
                            </if>
                            <pathconvert pathsep=":" dirsep="/" property="assets.@{name}.@{type}.path">
                                <map from="${assets.dir}/" to="${assets.prefix}" />
                                <resources refid="assets.@{name}.@{type}.compiled" />
                            </pathconvert>
                        </then>
                    </if>
                </sequential>
            </for>
        </sequential>
    </macrodef>

    <macrodef name="html-build-common">
        <attribute name="name" />
        <sequential>
            <property name="pages.@{name}.tmpl" value="${listit.templates.empty}" />
            <fail message="Template '${pages.@{name}.tmpl}' missing for page '@{name}'.">
                <condition>
                    <not>
                        <available file="${pages.@{name}.tmpl}" />
                    </not>
                </condition>
            </fail>
            <htmltemplate
                input="${pages.@{name}.tmpl}"
                output="${pages.@{name}.html}"
                scripts="${assets.@{name}.js.path}"
                stylesheets="${assets.@{name}.css.path}" />
        </sequential>
    </macrodef>

    <target name="-build.html">
        <propertyselector property="html-pages"
            delimiter=" "
            match="pages\.([^\.]+)\.html"
            select="\1"
            casesensitive="true" />
    </target>

    <target name="build.debug.html" depends="build.debug.setup,build.debug.assets,-build.html">
        <for list="${html-pages}" delimiter=" " param="name">
            <sequential>
                <debug-assets name="@{name}" />
                <html-build-common name="@{name}" />
            </sequential>
        </for>
    </target>

    <target name="build.release.html" depends="build.release.setup,build.release.assets,-build.html">
        <for list="${html-pages}" delimiter=" " param="name">
            <sequential>
                <echo level="info" message="Compiling page @{name}" />
                <release-assets name="@{name}" />
                <html-build-common name="@{name}" />
            </sequential>
        </for>
    </target>

    <target name="build.release.setup" depends="-build.release.before,-build.setup">
        <property name="DEBUG" value="false" />
        <mkdir dir="${deploy.dir}" />
        <mkdir dir="${assets.js.dir}" />
        <mkdir dir="${assets.img.dir}" />
        <mkdir dir="${assets.css.dir}" />
    </target>

    <extension-point name="-build.before" />
    <extension-point name="-build.debug.before" depends="-build.before" />
    <extension-point name="-build.release.before" depends="-build.before" />

    <target name="build.debug.setup" depends="-build.debug.before,-build.setup">
        <property name="DEBUG" value="true" />
        <link overwrite="yes" link="${assets.js.dir}"  resource="${listit.js.dir}" />
        <link overwrite="yes" link="${assets.css.dir}" resource="${listit.css.dir}" />
        <link overwrite="yes" link="${assets.img.dir}" resource="${listit.img.dir}" />
    </target>

    <target name="build.release.images" depends="build.release.setup">
        <pngtastic todir="${assets.img.dir}">
            <fileset dir="${listit.img.dir}">
                <include name="**/*.png"/>
            </fileset>
        </pngtastic>
    </target>

    <target name="-build.setup" depends="clean,templates">
        <property name="assets.dir" value="${build.dir}" />
        <property name="assets.prefix" value="" />
        <property name="assets.js.dir" value="${assets.dir}/js" />
        <property name="assets.css.dir" value="${assets.dir}/css" />
        <property name="assets.img.dir" value="${assets.dir}/img" />
        <script language="javascript">
            try {
                // Java 8 Compat.
                // https://bugs.openjdk.java.net/browse/JDK-8025132
                load('nashorn:mozilla_compat.js')
            } catch(e) {}
            importPackage(Packages.java.io);
            importPackage(Packages.org.apache.tools.ant.util);
            var br = String(project.getProperty("line.separator"));
            function readFile(file) {
                var contents = String(new java.lang.String(FileUtils.readFully(new FileReader(file))));
                contents = contents.replace(new RegExp(br, 'g'), '\n');
                return contents;
            }
            var contents = readFile(project.getProperty("contributors"));
            var authorList = contents.split('\n').map(function(str) {
                return str.trim();
            }).filter(function(str) {
                return !!str;
            });

            project.setProperty("listit.authors", authorList.join(", "));
            project.setProperty("listit.authors.json", JSON.stringify(authorList));
            project.setProperty("listit.authors.list", authorList.join(","));
        </script>
        <mkdir dir="${build.dir}" />
        <mkdir dir="${assets.dir}" />
    </target>

    <extension-point name="build.clean"/>

    <target name="clean" depends="build.clean">
        <rmdir dir="${build.dir}" />
    </target>

    <extension-point name="build.release" depends="build.release.images,build.release.assets,build.release.html" />
    <extension-point name="build.debug" depends="build.debug.assets,build.debug.html" />

    <target name="-prepare.release">
        <property name="build.is.mode.release" value="true" />
        <property name="build.version" value="${listit.version}" />
        <property name="build.basename" value="listit-release" />
        <property name="build.updates_basename" value="updates" />
    </target>

    <target name="-prepare.nightly">
        <property name="build.is.mode.release" value="true" />
        <property name="build.basename" value="listit-nightly" />
        <property name="build.is.mode.nightly" value="true" />
        <tstamp>
            <!-- Yes, this version is wierd. Chrome is wierd. -->
            <format property="build.version" pattern="yyy.M.d"/>
        </tstamp>
        <property name="build.updates_basename" value="updates-nightly" />
    </target>

    <target name="-prepare.debug">
        <property name="build.is.mode.debug" value="true" />
        <property name="build.version" value="${listit.version}" />
    </target>


    <target name="debug" depends="-prepare.debug,build.debug">
        <rmdir dir="${debug.dir}" />
        <fail message="Failed to delete debug directory: ${debug.dir}">
            <condition>
                <available file="${debug.dir}" />
            </condition>
        </fail>
        <mkdir dir="${base-debug.dir}" />
        <move file="${build.dir}" todir="${base-debug.dir}"/>
    </target>

    <target name="release" depends="-prepare.release,build.release" />
    <target name="nightly" depends="-prepare.nightly,build.release" />
</project>
